* Literate Programming

Refer to [[https://www.youtube.com/watch?v=GK3fij-D1G8][Emacs Literal Programming]]

#+begin_src python
print("literate programming")
return 2
#+end_src

#+RESULTS:
: 2

#+begin_src sh
    cd ..
    ls
#+end_src

#+RESULTS:
| articles_videos      |
| books                |
| literate_programming |

"<s" tab to expand code block
"<c" tab to expand comment
"<q" tab to expand quote

"c-c c-c" to run

#+BEGIN_QUOTE

#+END_QUOTE

#+BEGIN_EXAMPLE

#+END_EXAMPLE

#+BEGIN_COMMENT
    This is a comment
#+END_COMMENT

#+begin_src python :results output
print("hello world")
print("another line")
#+end_src

#+RESULTS:
: hello world
: another line

c-c '  - to edit in another buffer

#+BEGIN_SRC cpp
#include <iostream>
int main() {
    std::cout << "Hello cpp" << std::endl;
    return 0;
}
#+END_SRC

#+RESULTS:
: Hello cpp

~hello-world~. Here is an example using the ~Eigen~ library and the ~c++17~ compiler.

#+BEGIN_SRC C++ :flags '("-std=c++17") :results output
#include <iostream>
#include <Eigen/Dense>
using namespace Eigen;
using namespace std;
int main()
{
  Matrix3d m = Matrix3d::Random();
  m = (m + Matrix3d::Constant(1.2)) * 50;
  cout << "m =" << endl << m << endl;
  Vector3d v(1,2,3);

  cout << "m * v =" << endl << m * v << endl;
}
#+END_SRC

#+RESULTS:

* Chaining

** Using session
#+BEGIN_SRC sh :session my-session :results silent
MY_NAME='hello world again'
#+END_SRC

#+BEGIN_SRC sh :session my-session :results output
echo $MY_NAME
#+END_SRC

#+RESULTS:
: hello world again

** Using properties

:PROPERTIES:
:header-args : :session session-python-chain
:END:

This works with languages supporting REPL

#+BEGIN_SRC python :results output
def calculate_sum(numbers):
    sum = 0
    for number in numbers:
       sum += number

    return sum
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output
numbers = [x for x in range(20)]
print("The sum of the numbers is: " + str(calculate_sum(numbers)))
#+END_SRC

#+RESULTS:

* Composing

Use name to share code

#+NAME: python-calc
#+BEGIN_SRC python
def calculate_sum(numbers):
    sum = 0
    for number in numbers:
       sum += number

    return sum
#+END_SRC

#+RESULTS: python-calc
: None

And here we create the data dn call the function
#+BEGIN_SRC python :results output :noweb yes
<<python-calc>>
numbers = [x for x in range(20)]
print("The sum of the numbers is: " + str(calculate_sum(numbers)))
#+END_SRC

#+RESULTS:
: The sum of the numbers is: 190


Why not mix languages as well, ~python~ and ~elisp~ working together

#+NAME: elisp-max-numbers
#+BEGIN_SRC elisp
(/ (* 10 (+ 30 5 2)) 5)
#+END_SRC

#+RESULTS: elisp-max-numbers
: 74

#+BEGIN_SRC python :results output :noweb yes
<<python-calc>>
numbers = [x for x in range(<<elisp-max-numbers()>>)]
print("The sum of the numbers is: " + str(calculate_sum(numbers)))
#+END_SRC

#+RESULTS:
: The sum of the numbers is: 2701

:PROPERTIES:
:header-args : :results output :mkdirp yes
:END:

We need to specify the requirements that we are demanding:
#+BEGIN_SRC text :mkdirp yes :tangle /tmp/docker/requirements.txt
Flask>=0.12,<0.13
flask-restplus>=0.9.2,<0.10
Flask-SSLify>=0.1.5,<0.2
Flask-Admin>=1.4.2,<1.5
gunicorn>=19,<20
#+END_SRC


* Command Log Mode

- Enable command log mode <m-x> command-log-mode
- clm/toggle-command-log-buffer <C-c o>

* Org Mode

[[https://github.com/daviwil/dotfiles/blob/master/Emacs.org][Emacs Howto]]

Org-mode is an excellent tool for when studying, especially programming. Taking
notes and experimenting with examples becomes very natural. Here is an example:
[[file:~/org/hacking_notebook.org::*The%20if%20Special%20Form][An introduction to Elisp: The if Special Form]]


:PROPERTIES:
:NOTER_DOCUMENT: /Users/mengwangk/workspace/development/coding-and-reading/machine_learning/Python for Data Analysis, 2nd Edition.pdf
:NOTER_AUTO_SAVE_LAST_LOCATION: t
:NOTER_PAGE: 100
:END:

** Sub Heading <m-enter>

*** Sub heading <tab> or <m-arrow>

1. order list 1
2. order list 2
   a. sub order
      a. order
3. sff

   <m-shift-left/right> to add/remove columns

   |   |   |   |   |   |   |   |   |   | xx |   | xx | xx | xx |
   |---+---+---+---+---+---+---+---+---+----+---+----+----+----|
   |   |   |   |   |   |   |   |   |   |    |   |    |    |    |

   C-c |

   |         |      |     |   |   |
   |---------+------+-----+---+---|
   | sdffdsf | fsdf | dfd |   |   |
   |---------+------+-----+---+---|
   | ffsdf   |      |     |   |   |
   | ffd     |      |     |   |   |


   C-c ~ using table.el

    +-----+-----+-----+
    | fsdfsdf | sdfdsfs | sdfdsfs |
    |         |         |         |
    +-----+-----+-----+
    |   |   | asfsdfdsfdsf |
    +-----+-----+-----+
    |     |     |     |
    +-----+-----+-----+
